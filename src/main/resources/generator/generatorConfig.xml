<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd" >
<generatorConfiguration>
    <!--
        执行命令：mvn mybatis-generator:generate
    -->

    <properties resource="application.properties"/>
    <!-- 需要额外加载的依赖包  -->

    <!--
        context:生成一组对象的环境
        id:必选，上下文id，用于在生成错误时提示
        defaultModelType:指定生成对象的样式
            1，conditional：类似hierarchical；
            2，flat：所有内容（主键，blob）等全部生成在一个对象中；
            3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)
        targetRuntime:
            1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；
            2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；
        introspectedColumnImpl：类全限定名，用于扩展MBG
    -->
    <context id="Mysql" targetRuntime="MyBatis3Simple" defaultModelType="flat">
        <!-- 注意以下标签的顺序:property*,plugin*,commentGenerator?,jdbcConnection,
              javaTypeResolver?,javaModelGenerator,sqlMapGenerator?,
              javaClientGenerator?,table+ -->
        <!-- 自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；
          一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖
        -->
        <property name="autoDelimitKeywords" value="false"/>
        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 格式化java代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
        <!-- 格式化XML代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>
        <!-- beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号； -->
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>

        <!-- 这个插件给由MBG生成的Java模型对象增加了equals和hashCode方法 -->
        <!--<plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin"/>-->

        <plugin type="tk.mybatis.mapper.generator.MapperPlugin">
            <property name="mappers" value="online.yuyanjia.template.mobile.util.BaseMapper"/>
        </plugin>

        <!--<commentGenerator>-->
        <!--&lt;!&ndash; 是否去除自动生成的注释 true：是 ： false:否 &ndash;&gt;-->
        <!--<property name="suppressAllComments" value="true"/>-->
        <!--</commentGenerator>-->

        <!-- 数据库链接URL、用户名、密码 -->
        <jdbcConnection driverClass="${spring.datasource.driver-class-name}"
                        connectionURL="${spring.datasource.url}"
                        userId="${spring.datasource.username}"
                        password="${spring.datasource.password}"/>

        <!--类型处理器-->
        <javaTypeResolver type="org.mybatis.generator.internal.types.JavaTypeResolverDefaultImpl">
            <!--
                true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型
                false：默认,
                    scale>0;length>18：使用BigDecimal;
                    scale=0;length[10,18]：使用Long；
                    scale=0;length[5,9]：使用Integer；
                    scale=0;length<5：使用Short；
             -->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!-- 生成模型的包名和位置 -->
        <javaModelGenerator targetPackage="online.yuyanjia.template.mobile.model.DO"
                            targetProject="src/main/java">
            <!--  for MyBatis3/MyBatis3Simple
               自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter；
            -->
            <property name="constructorBased" value="false"/>
            <property name="exampleMethodVisibility" value="false"/>
        </javaModelGenerator>
        <!-- 生成的映射文件包名和位置 -->
        <sqlMapGenerator targetPackage="mapper" targetProject="src/main/resources"/>
        <!-- 生成mapper的包名和位置 -->
        <!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口
            targetPackage/targetProject:同javaModelGenerator
            type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：
                1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；
                2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；
                3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；
            注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER
        -->
        <javaClientGenerator targetPackage="online.yuyanjia.template.mobile.mapper"
                             targetProject="src/main/java" type="XMLMAPPER"/>
        <!-- 要生成的那些表 -->
        <table schema="TEST" tableName="user_info" domainObjectName="UserInfoDO">
            <!-- generatedKey用于生成生成主键的方法，
                   如果设置了该元素，MBG会在生成的<insert>元素中生成一条正确的<selectKey>元素，该元素可选
                   column:主键的列名；
                   sqlStatement：要生成的selectKey语句，有以下可选项：
                       Cloudscape:相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
                       DB2       :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
                       DB2_MF    :相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1
                       Derby      :相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL()
                       HSQLDB      :相当于selectKey的SQL为：CALL IDENTITY()
                       Informix  :相当于selectKey的SQL为：select dbinfo('sqlca.sqlerrd1') from systables where tabid=1
                   MySql      :相当于selectKey的SQL为：SELECT LAST_INSERT_ID()
                   SqlServer :相当于selectKey的SQL为：SELECT SCOPE_IDENTITY()
                   SYBASE      :相当于selectKey的SQL为：SELECT @@IDENTITY
                   JDBC      :相当于在生成的insert元素上添加useGeneratedKeys="true"和keyProperty属性-->
            <!--mysql 配置-->
            <generatedKey column="uid" sqlStatement="Mysql" identity="true"/>
            <property name="rootClass" value="online.yuyanjia.template.mobile.model.base.BaseDO"/>
        </table>
    </context>
</generatorConfiguration>